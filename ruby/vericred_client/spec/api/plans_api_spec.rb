=begin
Vericred API

Vericred's API allows you to search for Health Plans that a specific doctor\naccepts.\n\n## Getting Started\n\nVisit our [Developer Portal](https://vericred.3scale.net/access_code?access_code=vericred&cms_token=3545ca52af07bde85b7c0c3aa9d1985e) to\ncreate an account.\n\nOnce you have created an account, you can create one Application for\nProduction and another for our Sandbox (select the appropriate Plan when\nyou create the Application).\n\n## Authentication\n\nTo authenticate, pass the API Key you created in the Developer Portal as\na `Vericred-Api-Key` header.\n\n`curl -H 'Vericred-Api-Key: YOUR_KEY' \"https://api.vericred.com/providers?search_term=Foo&zip_code=11215\"`\n\n## Versioning\n\nVericred's API default to the latest version.  However, if you need a specific\nversion, you can request it with an `Accept-Version` header.\n\nThe current version is `v3`.  Previous versions are `v1` and `v2`.\n\n`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' \"https://api.vericred.com/providers?search_term=Foo&zip_code=11215\"`\n\n## Pagination\n\nMost endpoints are not paginated.  It will be noted in the documentation if/when\nan endpoint is paginated.\n\nWhen pagination is present, a `meta` stanza will be present in the response\nwith the total number of records\n\n```\n{\n  things: [{ id: 1 }, { id: 2 }],\n  meta: { total: 500 }\n}\n```\n\n## Sideloading\n\nWhen we return multiple levels of an object graph (e.g. `Provider`s and their `State`s\nwe sideload the associated data.  In this example, we would provide an Array of\n`State`s and a `state_id` for each provider.  This is done primarily to reduce the\npayload size since many of the `Provider`s will share a `State`\n\n```\n{\n  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],\n  states: [{ id: 1, code: 'NY' }]\n}\n```\n\nIf you need the second level of the object graph, you can just match the\ncorresponding id.\n\n## Selecting specific data\n\nAll endpoints allow you to specify which fields you would like to return.\nThis allows you to limit the response to contain only the data you need.\n\nFor example, let's take a request that returns the following JSON by default\n\n```\n{\n  provider: {\n    id: 1,\n    name: 'John',\n    phone: '1234567890',\n    field_we_dont_care_about: 'value_we_dont_care_about'\n  },\n  states: [{\n    id: 1,\n    name: 'New York',\n    code: 'NY',\n    field_we_dont_care_about: 'value_we_dont_care_about'\n  }]\n}\n```\n\nTo limit our results to only return the fields we care about, we specify the\n`select` query string parameter for the corresponding fields in the JSON\ndocument.\n\nIn this case, we want to select `name` and `phone` from the `provider` key,\nso we would add the parameters `select=provider.name,provider.phone`.\nWe also want the `name` and `code` from the `states` key, so we would\nadd the parameters `select=states.name,staes.code`.  The id field of\neach document is always returned whether or not it is requested.\n\nOur final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`\n\nThe response would be\n\n```\n{\n  provider: {\n    id: 1,\n    name: 'John',\n    phone: '1234567890'\n  },\n  states: [{\n    id: 1,\n    name: 'New York',\n    code: 'NY'\n  }]\n}\n```\n\n

OpenAPI spec version: 

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for VericredClient::PlansApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'PlansApi' do
  before do
    # run before each test
    @instance = VericredClient::PlansApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlansApi' do
    it 'should create an instact of PlansApi' do
      @instance.should be_a(VericredClient::PlansApi)
    end
  end

  # unit tests for plans_find_post
  # Find a set of plans for a Zip Code and County
  # ### Location Information\n\nSearching for a set of plans requires a &#x60;zip_code&#x60; and &#x60;fips_code&#x60;\ncode.  These are used to determine pricing and availabity\nof health plans.\n\nOptionally, you may provide a list of Applicants or Providers\n\n### Applicants\n\nThis is a list of people who will be covered by the plan.  We\nuse this list to calculate the premium.  You must include &#x60;age&#x60;\nand can include &#x60;smoker&#x60;, which also factors into pricing in some\nstates.\n\nApplicants *must* include an age.  If smoker is omitted, its value is assumed\nto be false.\n\n#### Multiple Applicants\n\nTo get pricing for multiple applicants, just append multiple sets\nof data to the URL with the age and smoking status of each applicant\nnext to each other.\n\nFor example, given two applicants - one age 32 and a non-smoker and one\nage 29 and a smoker, you could use the following request\n\n&#x60;GET /plans?zip_code&#x3D;07451&amp;fips_code&#x3D;33025&amp;applicants[][age]&#x3D;32&amp;applicants[][age]&#x3D;29&amp;applicants[][smoker]&#x3D;true&#x60;\n\nIt would also be acceptible to include &#x60;applicants[][smoker]&#x3D;false&#x60; after the\nfirst applicant&#39;s age.\n\n### Providers\n\nWe identify Providers (Doctors) by their National Practitioner\nIndex number (NPI).  If you pass a list of Providers, keyed by\ntheir NPI number, we will return a list of which Providers are\nin and out of network for each plan returned.\n\nFor example, if we had two providers with the NPI numbers &#x60;12345&#x60; and &#x60;23456&#x60;\nyou would make the following request\n\n&#x60;GET /plans?zip_code&#x3D;07451&amp;fips_code&#x3D;33025&amp;providers[][npi]&#x3D;12345&amp;providers[][npi]&#x3D;23456&#x60;\n\n### Enrollment Date\n\nTo calculate plan pricing and availability, we default to the current date\nas the enrollment date.  To specify a date in the future (or the past), pass\na string with the format &#x60;YYYY-MM-DD&#x60; in the &#x60;enrollment_date&#x60; parameter.\n\n&#x60;GET /plans?zip_code&#x3D;07451&amp;fips_code&#x3D;33025&amp;enrollment_date&#x3D;2016-01-01&#x60;\n\n### Subsidy\n\nOn-marketplace plans are eligible for a subsidy based on the\n&#x60;household_size&#x60; and &#x60;household_income&#x60; of the applicants.  If you\npass those values, we will calculate the &#x60;subsidized_premium&#x60;\nand return it for each plan.  If no values are provided, the\n&#x60;subsidized_premium&#x60; will be the same as the &#x60;premium&#x60;\n\n&#x60;GET /plans?zip_code&#x3D;07451&amp;fips_code&#x3D;33025&amp;household_size&#x3D;4&amp;household_income&#x3D;40000&#x60;\n\n
  # @param query Plan query
  # @param [Hash] opts the optional parameters
  # @return [Array<Plan>]
  describe 'plans_find_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
