=begin
Vericred API

Vericred's API allows you to search for Health Plans that a specific doctor\naccepts.\n\n## Getting Started\n\nVisit our [Developer Portal](https://vericred.3scale.net/access_code?access_code=vericred&cms_token=3545ca52af07bde85b7c0c3aa9d1985e) to\ncreate an account.\n\nOnce you have created an account, you can create one Application for\nProduction and another for our Sandbox (select the appropriate Plan when\nyou create the Application).\n\n## Authentication\n\nTo authenticate, pass the API Key you created in the Developer Portal as\na `Vericred-Api-Key` header.\n\n`curl -H 'Vericred-Api-Key: YOUR_KEY' \"https://api.vericred.com/providers?search_term=Foo&zip_code=11215\"`\n\n## Versioning\n\nVericred's API default to the latest version.  However, if you need a specific\nversion, you can request it with an `Accept-Version` header.\n\nThe current version is `v3`.  Previous versions are `v1` and `v2`.\n\n`curl -H 'Vericred-Api-Key: YOUR_KEY' -H 'Accept-Version: v2' \"https://api.vericred.com/providers?search_term=Foo&zip_code=11215\"`\n\n## Pagination\n\nMost endpoints are not paginated.  It will be noted in the documentation if/when\nan endpoint is paginated.\n\nWhen pagination is present, a `meta` stanza will be present in the response\nwith the total number of records\n\n```\n{\n  things: [{ id: 1 }, { id: 2 }],\n  meta: { total: 500 }\n}\n```\n\n## Sideloading\n\nWhen we return multiple levels of an object graph (e.g. `Provider`s and their `State`s\nwe sideload the associated data.  In this example, we would provide an Array of\n`State`s and a `state_id` for each provider.  This is done primarily to reduce the\npayload size since many of the `Provider`s will share a `State`\n\n```\n{\n  providers: [{ id: 1, state_id: 1}, { id: 2, state_id: 1 }],\n  states: [{ id: 1, code: 'NY' }]\n}\n```\n\nIf you need the second level of the object graph, you can just match the\ncorresponding id.\n\n## Selecting specific data\n\nAll endpoints allow you to specify which fields you would like to return.\nThis allows you to limit the response to contain only the data you need.\n\nFor example, let's take a request that returns the following JSON by default\n\n```\n{\n  provider: {\n    id: 1,\n    name: 'John',\n    phone: '1234567890',\n    field_we_dont_care_about: 'value_we_dont_care_about'\n  },\n  states: [{\n    id: 1,\n    name: 'New York',\n    code: 'NY',\n    field_we_dont_care_about: 'value_we_dont_care_about'\n  }]\n}\n```\n\nTo limit our results to only return the fields we care about, we specify the\n`select` query string parameter for the corresponding fields in the JSON\ndocument.\n\nIn this case, we want to select `name` and `phone` from the `provider` key,\nso we would add the parameters `select=provider.name,provider.phone`.\nWe also want the `name` and `code` from the `states` key, so we would\nadd the parameters `select=states.name,staes.code`.  The id field of\neach document is always returned whether or not it is requested.\n\nOur final request would be `GET /providers/12345?select=provider.name,provider.phone,states.name,states.code`\n\nThe response would be\n\n```\n{\n  provider: {\n    id: 1,\n    name: 'John',\n    phone: '1234567890'\n  },\n  states: [{\n    id: 1,\n    name: 'New York',\n    code: 'NY'\n  }]\n}\n```\n\n

OpenAPI spec version: 

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require "uri"

module VericredClient
  class DrugCoverageApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Find Drug Coverages for a given NDC
    # Drug Coverages are the specific tier level, quantity limit, prior authorization\nand step therapy for a given Drug/Plan combination.  This endpoint returns\nall DrugCoverages for a given Drug\n\n
    # @param ndc NDC for a drug
    # @param [Hash] opts the optional parameters
    # @return [Array<DrugCoverage>]
    def drugs_ndc_coverages_get(ndc, opts = {})
      data, _status_code, _headers = drugs_ndc_coverages_get_with_http_info(ndc, opts)
      return data
    end

    # Find Drug Coverages for a given NDC
    # Drug Coverages are the specific tier level, quantity limit, prior authorization\nand step therapy for a given Drug/Plan combination.  This endpoint returns\nall DrugCoverages for a given Drug\n\n
    # @param ndc NDC for a drug
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DrugCoverage>, Fixnum, Hash)>] Array<DrugCoverage> data, response status code and response headers
    def drugs_ndc_coverages_get_with_http_info(ndc, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: DrugCoverageApi.drugs_ndc_coverages_get ..."
      end
      # verify the required parameter 'ndc' is set
      fail ArgumentError, "Missing the required parameter 'ndc' when calling DrugCoverageApi.drugs_ndc_coverages_get" if ndc.nil?
      # resource path
      local_var_path = "/drugs/{ndc}/coverages".sub('{format}','json').sub('{' + 'ndc' + '}', ndc.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
            auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DrugCoverage>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DrugCoverageApi#drugs_ndc_coverages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
